spack:
  compilers: {}
  concretizer:
    reuse: true
    targets:
    # Determine whether we want to target specific or generic
    # microarchitectures. Valid values are: "microarchitectures" or "generic".
    # An example of "microarchitectures" would be "skylake" or "bulldozer",
    # while an example of "generic" would be "aarch64" or "x86_64_v4".
      granularity: microarchitectures
    # If "false" allow targets that are incompatible with the current host (for
    # instance concretize with target "icelake" while running on "haswell").
    # If "true" only allow targets that are compatible with the host.
      host_compatible: true
  # When "true" concretize root specs of environments together, so that each unique
  # package in an environment corresponds to one concrete spec. This ensures
  # environments can always be activated. When "false" perform concretization separately
  # on each root spec, allowing different versions and variants of the same package in
  # an environment.
    unify: true
    duplicates:
    # "none": allows a single node for any package in the DAG.
    # "minimal": allows the duplication of 'build-tools' nodes only
    # (e.g. py-setuptools, cmake etc.)
    # "full" (experimental): allows separation of the entire build-tool stack (e.g. the entire "cmake" subDAG)
      strategy: minimal
    # Maximum number of duplicates in a DAG, when using a strategy that allows duplicates. "default" is the
    # number used if there isn't a more specific alternative
      max_dupes:
        default: 1
      # Virtuals
        c: 2
        cxx: 2
        fortran: 1
      # Regular packages
        cmake: 2
        gmake: 2
        python: 2
        python-venv: 2
        py-cython: 2
        py-flit-core: 2
        py-pip: 2
        py-setuptools: 2
        py-wheel: 2
        xcb-proto: 2
      # Compilers
        gcc: 2
        llvm: 2
  # Option to specify compatibility between operating systems for reuse of compilers and packages
  # Specified as a key: [list] where the key is the os that is being targeted, and the list contains the OS's
  # it can reuse. Note this is a directional compatibility so mutual compatibility between two OS's
  # requires two entries i.e. os_compatible: {sonoma: [monterey], monterey: [sonoma]}
    os_compatible: {}
    splice:
      explicit: []
      automatic: false
  # Maximum time, in seconds, allowed for the 'solve' phase. If set to 0, there is no time limit.
    timeout: 0
    error_on_timeout: true
    static_analysis: false
  definitions: {}
  env_vars: {}
  include:
  - path: ${platform}
    optional: true
  - path: base
  view: {}
  develop: {}
  mirrors:
    spack-public:
      binary: false
      url: https://mirror.spack.io
  repos:
    builtin:
      git: https://github.com/spack/spack-packages.git
  packages:
    gcc:
      externals:
      - spec: gcc@11.4.0 languages:='c,c++,fortran'
        prefix: /usr
        extra_attributes:
          compilers:
            c: /usr/bin/gcc
            cxx: /usr/bin/g++
            fortran: /usr/bin/gfortran
    llvm:
      externals:
      - spec: llvm@14.0.0+clang~flang~lld~lldb
        prefix: /usr
        extra_attributes:
          compilers:
            c: /usr/bin/clang
            cxx: /usr/bin/clang++
    all:
      providers:
        awk: [gawk]
        armci: [armcimpi]
        blas: [openblas, amdblis]
        c: [gcc, llvm, intel-oneapi-compilers]
        cxx: [gcc, llvm, intel-oneapi-compilers]
        D: [ldc]
        daal: [intel-oneapi-daal]
        elf: [elfutils]
        fftw-api: [fftw, amdfftw]
        flame: [libflame, amdlibflame]
        fortran: [gcc, llvm, intel-oneapi-compilers]
        fortran-rt: [gcc-runtime, intel-oneapi-runtime]
        fuse: [libfuse]
        gl: [glx, osmesa]
        glu: [mesa-glu, openglu]
        golang: [go, gcc]
        go-or-gccgo-bootstrap: [go-bootstrap, gcc]
        iconv: [libiconv]
        ipp: [intel-oneapi-ipp]
        java: [openjdk, jdk]
        jpeg: [libjpeg-turbo, libjpeg]
        lapack: [openblas, amdlibflame]
        libc: [glibc, musl]
        libgfortran: [gcc-runtime]
        libglx: [mesa+glx]
        libifcore: [intel-oneapi-runtime]
        libllvm: [llvm]
        lua-lang: [lua, lua-luajit-openresty, lua-luajit]
        luajit: [lua-luajit-openresty, lua-luajit]
        mariadb-client: [mariadb-c-client, mariadb]
        mkl: [intel-oneapi-mkl]
        mpe: [mpe2]
        mpi: [openmpi, mpich]
        mysql-client: [mysql, mariadb-c-client]
        opencl: [pocl]
        onedal: [intel-oneapi-dal]
        pbs: [openpbs, torque]
        pil: [py-pillow]
        pkgconfig: [pkgconf, pkg-config]
        qmake: [qt-base, qt]
        rpc: [libtirpc]
        scalapack: [netlib-scalapack, amdscalapack]
        sycl: [hipsycl]
        szip: [libaec, libszip]
        tbb: [intel-tbb]
        unwind: [libunwind]
        uuid: [util-linux-uuid, libuuid]
        wasi-sdk: [wasi-sdk-prebuilt]
        xkbdata-api: [xkeyboard-config, xkbdata]
        xxd: [xxd-standalone, vim]
        yacc: [bison, byacc]
        ziglang: [zig]
        zlib-api: [zlib-ng+compat, zlib]
      permissions:
        read: world
        write: user
    cce:
      buildable: false
    cray-fftw:
      buildable: false
    cray-libsci:
      buildable: false
    cray-mpich:
      buildable: false
    cray-mvapich2:
      buildable: false
    cray-pmi:
      buildable: false
    egl:
      buildable: false
    essl:
      buildable: false
    fj:
      buildable: false
    fujitsu-mpi:
      buildable: false
    fujitsu-ssl2:
      buildable: false
    glibc:
      buildable: false
    hpcx-mpi:
      buildable: false
    iconv:
      prefer: [libiconv]
    mpt:
      buildable: false
    musl:
      buildable: false
    spectrum-mpi:
      buildable: false
    xl:
      buildable: false
  modules:
    prefix_inspections:
      ./bin:
      - PATH
      ./man:
      - MANPATH
      ./share/man:
      - MANPATH
      ./share/aclocal:
      - ACLOCAL_PATH
      ./lib/pkgconfig:
      - PKG_CONFIG_PATH
      ./lib64/pkgconfig:
      - PKG_CONFIG_PATH
      ./share/pkgconfig:
      - PKG_CONFIG_PATH
      ./:
      - CMAKE_PREFIX_PATH

  # These are configurations for the module set named "default"
    default:
    # Where to install modules
      roots:
        tcl: $spack/share/spack/modules
        lmod: $spack/share/spack/lmod
    # What type of modules to use ("tcl" and/or "lmod")
      enable: []

      tcl:
        all:
          autoload: direct

    # Default configurations if lmod is enabled
      lmod:
        all:
          autoload: direct
        hierarchy:
        - mpi
  config:
    install_tree:
      root: $spack/opt/spack
      projections:
        all: '{architecture.platform}-{architecture.target}/{name}-{version}-{hash}'
    # install_tree can include an optional padded length (int or boolean)
    # default is False (do not pad)
    # if padded_length is True, Spack will pad as close to the system max path
    # length as possible
    # if padded_length is an integer, Spack will pad to that many characters,
    # assuming it is higher than the length of the install_tree root.
    # padded_length: 128


  # Locations where templates should be found
    template_dirs:
    - $spack/share/spack/templates

  # Directory where licenses should be located
    license_dir: $spack/etc/spack/licenses
    build_stage:
    - $tempdir/$user/spack-stage
    - $user_cache_path/stage
    test_stage: $user_cache_path/test
    source_cache: $spack/var/spack/cache
    misc_cache: $user_cache_path/cache
    connect_timeout: 30
    verify_ssl: true
    ssl_certs: $SSL_CERT_FILE
    suppress_gpg_warnings: false
    checksum: true
    deprecated: false
    dirty: false
    build_language: C
    locks: true
    url_fetch_method: urllib
    build_jobs: 16
    concurrent_packages: 1
    ccache: false
    db_lock_timeout: 60
    package_lock_timeout: null
    shared_linking:
    # Spack automatically embeds runtime search paths in ELF binaries for their
    # dependencies. Their type can either be "rpath" or "runpath". For glibc, rpath is
    # inherited and has precedence over LD_LIBRARY_PATH; runpath is not inherited
    # and of lower precedence. DO NOT MIX these within the same install tree.
      type: rpath


    # (Experimental) Embed absolute paths of dependent libraries directly in ELF
    # binaries to avoid runtime search. This can improve startup time of
    # executables with many dependencies, in particular on slow filesystems.
      bind: false

    # Controls the handling of missing dynamic libraries after installation.
    # Options are ignore (default), warn, or error. If set to error, the
    # installation fails if installed binaries reference dynamic libraries that
    # are not found in their specified rpaths.
      missing_library_policy: ignore


  # Set to 'false' to allow installation on filesystems that doesn't allow setgid bit
  # manipulation by unprivileged user (e.g. AFS)
    allow_sgid: true
    install_status: true
    binary_index_ttl: 600
    flags:
    # Whether to keep -Werror flags active in package builds.
      keep_werror: none

  # A mapping of aliases that can be used to define new commands. For instance,
  # `sp: spec -I` will define a new command `sp` that will execute `spec` with
  # the `-I` argument. Aliases cannot override existing commands.
    aliases:
      concretise: concretize
      containerise: containerize
      rm: remove
    debug: false
  upstreams: {}
  bootstrap:
    enable: true
    root: $user_cache_path/bootstrap
    sources:
    - name: github-actions-v0.6
      metadata: $spack/share/spack/bootstrap/github-actions-v0.6
    - name: github-actions-v0.5
      metadata: $spack/share/spack/bootstrap/github-actions-v0.5
    - name: spack-install
      metadata: $spack/share/spack/bootstrap/spack-install
    trusted:
    # By default we trust bootstrapping from sources and from binaries
    # produced on Github via the workflow
      github-actions-v0.6: true
      github-actions-v0.5: true
      spack-install: true
  ci: {}
  cdash: {}
  toolchains: {}
